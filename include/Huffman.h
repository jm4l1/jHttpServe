#ifndef __HUFFMAN_H__
#define __HUFFMAN_H__

#include <algorithm>
#include <bitset>
#include <map>
#include <ranges>
#include <string>
#include <vector>

namespace Huffman
{
	constexpr size_t MIN_CODEPOINT_LENGTH = 5;

	static std::map<int, std::string> EncodeTable = {
		{ 0, "1111111111000" },
		{ 1, "11111111111111111011000" },
		{ 2, "1111111111111111111111100010" },
		{ 3, "1111111111111111111111100011" },
		{ 4, "1111111111111111111111100100" },
		{ 5, "1111111111111111111111100101" },
		{ 6, "1111111111111111111111100110" },
		{ 7, "1111111111111111111111100111" },
		{ 8, "1111111111111111111111101000" },
		{ 9, "111111111111111111101010" },
		{ 10, "111111111111111111111111111100" },
		{ 11, "1111111111111111111111101001" },
		{ 12, "1111111111111111111111101010" },
		{ 13, "111111111111111111111111111101" },
		{ 14, "1111111111111111111111101011" },
		{ 15, "1111111111111111111111101100" },
		{ 16, "1111111111111111111111101101" },
		{ 17, "1111111111111111111111101110" },
		{ 18, "1111111111111111111111101111" },
		{ 19, "1111111111111111111111110000" },
		{ 20, "1111111111111111111111110001" },
		{ 21, "1111111111111111111111110010" },
		{ 22, "111111111111111111111111111110" },
		{ 23, "1111111111111111111111110011" },
		{ 24, "1111111111111111111111110100" },
		{ 25, "1111111111111111111111110101" },
		{ 26, "1111111111111111111111110110" },
		{ 27, "1111111111111111111111110111" },
		{ 28, "1111111111111111111111111000" },
		{ 29, "1111111111111111111111111001" },
		{ 30, "1111111111111111111111111010" },
		{ 31, "1111111111111111111111111011" },
		{ 32, "010100" },
		{ 33, "1111111000" },
		{ 34, "1111111001" },
		{ 35, "111111111010" },
		{ 36, "1111111111001" },
		{ 37, "010101" },
		{ 38, "11111000" },
		{ 39, "11111111010" },
		{ 40, "1111111010" },
		{ 41, "1111111011" },
		{ 42, "11111001" },
		{ 43, "11111111011" },
		{ 44, "11111010" },
		{ 45, "010110" },
		{ 46, "010111" },
		{ 47, "011000" },
		{ 48, "00000" },
		{ 49, "00001" },
		{ 50, "00010" },
		{ 51, "011001" },
		{ 52, "011010" },
		{ 53, "011011" },
		{ 54, "011100" },
		{ 55, "011101" },
		{ 56, "011110" },
		{ 57, "011111" },
		{ 58, "1011100" },
		{ 59, "11111011" },
		{ 60, "111111111111100" },
		{ 61, "100000" },
		{ 62, "111111111011" },
		{ 63, "1111111100" },
		{ 64, "1111111111010" },
		{ 65, "100001" },
		{ 66, "1011101" },
		{ 67, "1011110" },
		{ 68, "1011111" },
		{ 69, "1100000" },
		{ 70, "1100001" },
		{ 71, "1100010" },
		{ 72, "1100011" },
		{ 73, "1100100" },
		{ 74, "1100101" },
		{ 75, "1100110" },
		{ 76, "1100111" },
		{ 77, "1101000" },
		{ 78, "1101001" },
		{ 79, "1101010" },
		{ 80, "1101011" },
		{ 81, "1101100" },
		{ 82, "1101101" },
		{ 83, "1101110" },
		{ 84, "1101111" },
		{ 85, "1110000" },
		{ 86, "1110001" },
		{ 87, "1110010" },
		{ 88, "11111100" },
		{ 89, "1110011" },
		{ 90, "11111101" },
		{ 91, "1111111111011" },
		{ 92, "1111111111111110000" },
		{ 93, "1111111111100" },
		{ 94, "11111111111100" },
		{ 95, "100010" },
		{ 96, "111111111111101" },
		{ 97, "00011" },
		{ 98, "100011" },
		{ 99, "00100" },
		{ 100, "100100" },
		{ 101, "00101" },
		{ 102, "100101" },
		{ 103, "100110" },
		{ 104, "100111" },
		{ 105, "00110" },
		{ 106, "1110100" },
		{ 107, "1110101" },
		{ 108, "101000" },
		{ 109, "101001" },
		{ 110, "101010" },
		{ 111, "00111" },
		{ 112, "101011" },
		{ 113, "1110110" },
		{ 114, "101100" },
		{ 115, "01000" },
		{ 116, "01001" },
		{ 117, "101101" },
		{ 118, "1110111" },
		{ 119, "1111000" },
		{ 120, "1111001" },
		{ 121, "1111010" },
		{ 122, "1111011" },
		{ 123, "111111111111110" },
		{ 124, "11111111100" },
		{ 125, "11111111111101" },
		{ 126, "1111111111101" },
		{ 127, "1111111111111111111111111100" },
		{ 128, "11111111111111100110" },
		{ 129, "1111111111111111010010" },
		{ 130, "11111111111111100111" },
		{ 131, "11111111111111101000" },
		{ 132, "1111111111111111010011" },
		{ 133, "1111111111111111010100" },
		{ 134, "1111111111111111010101" },
		{ 135, "11111111111111111011001" },
		{ 136, "1111111111111111010110" },
		{ 137, "11111111111111111011010" },
		{ 138, "11111111111111111011011" },
		{ 139, "11111111111111111011100" },
		{ 140, "11111111111111111011101" },
		{ 141, "11111111111111111011110" },
		{ 142, "111111111111111111101011" },
		{ 143, "11111111111111111011111" },
		{ 144, "111111111111111111101100" },
		{ 145, "111111111111111111101101" },
		{ 146, "1111111111111111010111" },
		{ 147, "11111111111111111100000" },
		{ 148, "111111111111111111101110" },
		{ 149, "11111111111111111100001" },
		{ 150, "11111111111111111100010" },
		{ 151, "11111111111111111100011" },
		{ 152, "11111111111111111100100" },
		{ 153, "111111111111111011100" },
		{ 154, "1111111111111111011000" },
		{ 155, "11111111111111111100101" },
		{ 156, "1111111111111111011001" },
		{ 157, "11111111111111111100110" },
		{ 158, "11111111111111111100111" },
		{ 159, "111111111111111111101111" },
		{ 160, "1111111111111111011010" },
		{ 161, "111111111111111011101" },
		{ 162, "11111111111111101001" },
		{ 163, "1111111111111111011011" },
		{ 164, "1111111111111111011100" },
		{ 165, "11111111111111111101000" },
		{ 166, "11111111111111111101001" },
		{ 167, "111111111111111011110" },
		{ 168, "11111111111111111101010" },
		{ 169, "1111111111111111011101" },
		{ 170, "1111111111111111011110" },
		{ 171, "111111111111111111110000" },
		{ 172, "111111111111111011111" },
		{ 173, "1111111111111111011111" },
		{ 174, "11111111111111111101011" },
		{ 175, "11111111111111111101100" },
		{ 176, "111111111111111100000" },
		{ 177, "111111111111111100001" },
		{ 178, "1111111111111111100000" },
		{ 179, "111111111111111100010" },
		{ 180, "11111111111111111101101" },
		{ 181, "1111111111111111100001" },
		{ 182, "11111111111111111101110" },
		{ 183, "11111111111111111101111" },
		{ 184, "11111111111111101010" },
		{ 185, "1111111111111111100010" },
		{ 186, "1111111111111111100011" },
		{ 187, "1111111111111111100100" },
		{ 188, "11111111111111111110000" },
		{ 189, "1111111111111111100101" },
		{ 190, "1111111111111111100110" },
		{ 191, "11111111111111111110001" },
		{ 192, "11111111111111111111100000" },
		{ 193, "11111111111111111111100001" },
		{ 194, "11111111111111101011" },
		{ 195, "1111111111111110001" },
		{ 196, "1111111111111111100111" },
		{ 197, "11111111111111111110010" },
		{ 198, "1111111111111111101000" },
		{ 199, "1111111111111111111101100" },
		{ 200, "11111111111111111111100010" },
		{ 201, "11111111111111111111100011" },
		{ 202, "11111111111111111111100100" },
		{ 203, "111111111111111111111011110" },
		{ 204, "111111111111111111111011111" },
		{ 205, "11111111111111111111100101" },
		{ 206, "111111111111111111110001" },
		{ 207, "1111111111111111111101101" },
		{ 208, "1111111111111110010" },
		{ 209, "111111111111111100011" },
		{ 210, "11111111111111111111100110" },
		{ 211, "111111111111111111111100000" },
		{ 212, "111111111111111111111100001" },
		{ 213, "11111111111111111111100111" },
		{ 214, "111111111111111111111100010" },
		{ 215, "111111111111111111110010" },
		{ 216, "111111111111111100100" },
		{ 217, "111111111111111100101" },
		{ 218, "11111111111111111111101000" },
		{ 219, "11111111111111111111101001" },
		{ 220, "1111111111111111111111111101" },
		{ 221, "111111111111111111111100011" },
		{ 222, "111111111111111111111100100" },
		{ 223, "111111111111111111111100101" },
		{ 224, "11111111111111101100" },
		{ 225, "111111111111111111110011" },
		{ 226, "11111111111111101101" },
		{ 227, "111111111111111100110" },
		{ 228, "1111111111111111101001" },
		{ 229, "111111111111111100111" },
		{ 230, "111111111111111101000" },
		{ 231, "11111111111111111110011" },
		{ 232, "1111111111111111101010" },
		{ 233, "1111111111111111101011" },
		{ 234, "1111111111111111111101110" },
		{ 235, "1111111111111111111101111" },
		{ 236, "111111111111111111110100" },
		{ 237, "111111111111111111110101" },
		{ 238, "11111111111111111111101010" },
		{ 239, "11111111111111111110100" },
		{ 240, "11111111111111111111101011" },
		{ 241, "111111111111111111111100110" },
		{ 242, "11111111111111111111101100" },
		{ 243, "11111111111111111111101101" },
		{ 244, "111111111111111111111100111" },
		{ 245, "111111111111111111111101000" },
		{ 246, "111111111111111111111101001" },
		{ 247, "111111111111111111111101010" },
		{ 248, "111111111111111111111101011" },
		{ 249, "1111111111111111111111111110" },
		{ 250, "111111111111111111111101100" },
		{ 251, "111111111111111111111101101" },
		{ 252, "111111111111111111111101110" },
		{ 253, "111111111111111111111101111" },
		{ 254, "111111111111111111111110000" },
		{ 255, "11111111111111111111101110" },
		{ 256, "111111111111111111111111111111" },
	};

	static std::map<std::string, int> DecodeTable = {
		{ "1111111111000", 0 },
		{ "11111111111111111011000", 1 },
		{ "1111111111111111111111100010", 2 },
		{ "1111111111111111111111100011", 3 },
		{ "1111111111111111111111100100", 4 },
		{ "1111111111111111111111100101", 5 },
		{ "1111111111111111111111100110", 6 },
		{ "1111111111111111111111100111", 7 },
		{ "1111111111111111111111101000", 8 },
		{ "111111111111111111101010", 9 },
		{ "111111111111111111111111111100", 10 },
		{ "1111111111111111111111101001", 11 },
		{ "1111111111111111111111101010", 12 },
		{ "111111111111111111111111111101", 13 },
		{ "1111111111111111111111101011", 14 },
		{ "1111111111111111111111101100", 15 },
		{ "1111111111111111111111101101", 16 },
		{ "1111111111111111111111101110", 17 },
		{ "1111111111111111111111101111", 18 },
		{ "1111111111111111111111110000", 19 },
		{ "1111111111111111111111110001", 20 },
		{ "1111111111111111111111110010", 21 },
		{ "111111111111111111111111111110", 22 },
		{ "1111111111111111111111110011", 23 },
		{ "1111111111111111111111110100", 24 },
		{ "1111111111111111111111110101", 25 },
		{ "1111111111111111111111110110", 26 },
		{ "1111111111111111111111110111", 27 },
		{ "1111111111111111111111111000", 28 },
		{ "1111111111111111111111111001", 29 },
		{ "1111111111111111111111111010", 30 },
		{ "1111111111111111111111111011", 31 },
		{ "010100", 32 },
		{ "1111111000", 33 },
		{ "1111111001", 34 },
		{ "111111111010", 35 },
		{ "1111111111001", 36 },
		{ "010101", 37 },
		{ "11111000", 38 },
		{ "11111111010", 39 },
		{ "1111111010", 40 },
		{ "1111111011", 41 },
		{ "11111001", 42 },
		{ "11111111011", 43 },
		{ "11111010", 44 },
		{ "010110", 45 },
		{ "010111", 46 },
		{ "011000", 47 },
		{ "00000", 48 },
		{ "00001", 49 },
		{ "00010", 50 },
		{ "011001", 51 },
		{ "011010", 52 },
		{ "011011", 53 },
		{ "011100", 54 },
		{ "011101", 55 },
		{ "011110", 56 },
		{ "011111", 57 },
		{ "1011100", 58 },
		{ "11111011", 59 },
		{ "111111111111100", 60 },
		{ "100000", 61 },
		{ "111111111011", 62 },
		{ "1111111100", 63 },
		{ "1111111111010", 64 },
		{ "100001", 65 },
		{ "1011101", 66 },
		{ "1011110", 67 },
		{ "1011111", 68 },
		{ "1100000", 69 },
		{ "1100001", 70 },
		{ "1100010", 71 },
		{ "1100011", 72 },
		{ "1100100", 73 },
		{ "1100101", 74 },
		{ "1100110", 75 },
		{ "1100111", 76 },
		{ "1101000", 77 },
		{ "1101001", 78 },
		{ "1101010", 79 },
		{ "1101011", 80 },
		{ "1101100", 81 },
		{ "1101101", 82 },
		{ "1101110", 83 },
		{ "1101111", 84 },
		{ "1110000", 85 },
		{ "1110001", 86 },
		{ "1110010", 87 },
		{ "11111100", 88 },
		{ "1110011", 89 },
		{ "11111101", 90 },
		{ "1111111111011", 91 },
		{ "1111111111111110000", 92 },
		{ "1111111111100", 93 },
		{ "11111111111100", 94 },
		{ "100010", 95 },
		{ "111111111111101", 96 },
		{ "00011", 97 },
		{ "100011", 98 },
		{ "00100", 99 },
		{ "100100", 100 },
		{ "00101", 101 },
		{ "100101", 102 },
		{ "100110", 103 },
		{ "100111", 104 },
		{ "00110", 105 },
		{ "1110100", 106 },
		{ "1110101", 107 },
		{ "101000", 108 },
		{ "101001", 109 },
		{ "101010", 110 },
		{ "00111", 111 },
		{ "101011", 112 },
		{ "1110110", 113 },
		{ "101100", 114 },
		{ "01000", 115 },
		{ "01001", 116 },
		{ "101101", 117 },
		{ "1110111", 118 },
		{ "1111000", 119 },
		{ "1111001", 120 },
		{ "1111010", 121 },
		{ "1111011", 122 },
		{ "111111111111110", 123 },
		{ "11111111100", 124 },
		{ "11111111111101", 125 },
		{ "1111111111101", 126 },
		{ "1111111111111111111111111100", 127 },
		{ "11111111111111100110", 128 },
		{ "1111111111111111010010", 129 },
		{ "11111111111111100111", 130 },
		{ "11111111111111101000", 131 },
		{ "1111111111111111010011", 132 },
		{ "1111111111111111010100", 133 },
		{ "1111111111111111010101", 134 },
		{ "11111111111111111011001", 135 },
		{ "1111111111111111010110", 136 },
		{ "11111111111111111011010", 137 },
		{ "11111111111111111011011", 138 },
		{ "11111111111111111011100", 139 },
		{ "11111111111111111011101", 140 },
		{ "11111111111111111011110", 141 },
		{ "111111111111111111101011", 142 },
		{ "11111111111111111011111", 143 },
		{ "111111111111111111101100", 144 },
		{ "111111111111111111101101", 145 },
		{ "1111111111111111010111", 146 },
		{ "11111111111111111100000", 147 },
		{ "111111111111111111101110", 148 },
		{ "11111111111111111100001", 149 },
		{ "11111111111111111100010", 150 },
		{ "11111111111111111100011", 151 },
		{ "11111111111111111100100", 152 },
		{ "111111111111111011100", 153 },
		{ "1111111111111111011000", 154 },
		{ "11111111111111111100101", 155 },
		{ "1111111111111111011001", 156 },
		{ "11111111111111111100110", 157 },
		{ "11111111111111111100111", 158 },
		{ "111111111111111111101111", 159 },
		{ "1111111111111111011010", 160 },
		{ "111111111111111011101", 161 },
		{ "11111111111111101001", 162 },
		{ "1111111111111111011011", 163 },
		{ "1111111111111111011100", 164 },
		{ "11111111111111111101000", 165 },
		{ "11111111111111111101001", 166 },
		{ "111111111111111011110", 167 },
		{ "11111111111111111101010", 168 },
		{ "1111111111111111011101", 169 },
		{ "1111111111111111011110", 170 },
		{ "111111111111111111110000", 171 },
		{ "111111111111111011111", 172 },
		{ "1111111111111111011111", 173 },
		{ "11111111111111111101011", 174 },
		{ "11111111111111111101100", 175 },
		{ "111111111111111100000", 176 },
		{ "111111111111111100001", 177 },
		{ "1111111111111111100000", 178 },
		{ "111111111111111100010", 179 },
		{ "11111111111111111101101", 180 },
		{ "1111111111111111100001", 181 },
		{ "11111111111111111101110", 182 },
		{ "11111111111111111101111", 183 },
		{ "11111111111111101010", 184 },
		{ "1111111111111111100010", 185 },
		{ "1111111111111111100011", 186 },
		{ "1111111111111111100100", 187 },
		{ "11111111111111111110000", 188 },
		{ "1111111111111111100101", 189 },
		{ "1111111111111111100110", 190 },
		{ "11111111111111111110001", 191 },
		{ "11111111111111111111100000", 192 },
		{ "11111111111111111111100001", 193 },
		{ "11111111111111101011", 194 },
		{ "1111111111111110001", 195 },
		{ "1111111111111111100111", 196 },
		{ "11111111111111111110010", 197 },
		{ "1111111111111111101000", 198 },
		{ "1111111111111111111101100", 199 },
		{ "11111111111111111111100010", 200 },
		{ "11111111111111111111100011", 201 },
		{ "11111111111111111111100100", 202 },
		{ "111111111111111111111011110", 203 },
		{ "111111111111111111111011111", 204 },
		{ "11111111111111111111100101", 205 },
		{ "111111111111111111110001", 206 },
		{ "1111111111111111111101101", 207 },
		{ "1111111111111110010", 208 },
		{ "111111111111111100011", 209 },
		{ "11111111111111111111100110", 210 },
		{ "111111111111111111111100000", 211 },
		{ "111111111111111111111100001", 212 },
		{ "11111111111111111111100111", 213 },
		{ "111111111111111111111100010", 214 },
		{ "111111111111111111110010", 215 },
		{ "111111111111111100100", 216 },
		{ "111111111111111100101", 217 },
		{ "11111111111111111111101000", 218 },
		{ "11111111111111111111101001", 219 },
		{ "1111111111111111111111111101", 220 },
		{ "111111111111111111111100011", 221 },
		{ "111111111111111111111100100", 222 },
		{ "111111111111111111111100101", 223 },
		{ "11111111111111101100", 224 },
		{ "111111111111111111110011", 225 },
		{ "11111111111111101101", 226 },
		{ "111111111111111100110", 227 },
		{ "1111111111111111101001", 228 },
		{ "111111111111111100111", 229 },
		{ "111111111111111101000", 230 },
		{ "11111111111111111110011", 231 },
		{ "1111111111111111101010", 232 },
		{ "1111111111111111101011", 233 },
		{ "1111111111111111111101110", 234 },
		{ "1111111111111111111101111", 235 },
		{ "111111111111111111110100", 236 },
		{ "111111111111111111110101", 237 },
		{ "11111111111111111111101010", 238 },
		{ "11111111111111111110100", 239 },
		{ "11111111111111111111101011", 240 },
		{ "111111111111111111111100110", 241 },
		{ "11111111111111111111101100", 242 },
		{ "11111111111111111111101101", 243 },
		{ "111111111111111111111100111", 244 },
		{ "111111111111111111111101000", 245 },
		{ "111111111111111111111101001", 246 },
		{ "111111111111111111111101010", 247 },
		{ "111111111111111111111101011", 248 },
		{ "1111111111111111111111111110", 249 },
		{ "111111111111111111111101100", 250 },
		{ "111111111111111111111101101", 251 },
		{ "111111111111111111111101110", 252 },
		{ "111111111111111111111101111", 253 },
		{ "111111111111111111111110000", 254 },
		{ "11111111111111111111101110", 255 },
		{ "111111111111111111111111111111", 256 },
	};

	inline std::vector<uint8_t> Decode(const std::vector<uint8_t>& encoded_buffer)
	{
		std::string decoding_string = "";
		std::vector<uint8_t> decoded_buffer;

		std::ranges::for_each(encoded_buffer,
							  [&decoding_string](const auto& encoded_byte)
							  {
								  std::bitset<8> octet{ encoded_byte };
								  decoding_string += octet.to_string();
							  });

		size_t offset = 0;
		auto current_length = MIN_CODEPOINT_LENGTH;
		while (decoding_string.size() - offset >= MIN_CODEPOINT_LENGTH)
		{
			auto codepoint = decoding_string.substr(offset, current_length);
			while (!DecodeTable.contains(codepoint))
			{
				current_length++;
				if (current_length + offset > decoding_string.size())
				{
					return decoded_buffer;
				}
				codepoint = decoding_string.substr(offset, current_length);
			}
			auto symbol = DecodeTable[codepoint];
			decoded_buffer.emplace_back(symbol);
			offset += current_length;
			current_length = MIN_CODEPOINT_LENGTH;
		}
		return decoded_buffer;
	};

	inline std::vector<uint8_t> Encode(const std::vector<uint8_t>& unencoded_buffer)
	{
		std::vector<uint8_t> encoded_buffer;
		std::string encoding_string("");
		for (auto& symbol : unencoded_buffer)
		{
			auto code_point = EncodeTable[symbol];
			encoding_string += code_point;
		};

		auto pad_length = 8 - (encoding_string.size() % 8);
		std::string padding(pad_length, '1');
		encoding_string += padding;
		size_t buffer_length = encoding_string.size() / 8;
		encoded_buffer.reserve(buffer_length);
		auto i = encoding_string.begin();

		while (i != encoding_string.end())
		{
			std::bitset<8> byte(std::string(i, i + 8));
			encoded_buffer.emplace_back(static_cast<uint8_t>(byte.to_ulong()));
			i += 8;
		}
		return encoded_buffer;
	};

	inline std::vector<uint8_t> Encode(const std::string& unencoded_string)
	{
		auto unencoded_buffer = std::vector<uint8_t>(unencoded_string.begin(), unencoded_string.end());
		return Encode(unencoded_buffer);
	};

}  // namespace Huffman
#endif